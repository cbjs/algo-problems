#!/usr/bin/env python
#coding:utf-8
#
# all ugly number can be generated by previous generated ugly numbers
# 
#   eg : 12 = 3 * 4 = 2 * 6
#
#   using 3 queue to generate ugly number
#   2# queue: 2 4 6 8 10 12 ..
#   3# queue: 3 9 12 15 ..
#   5# queue: 5 25..
#

queues = [[], [], []]

def pop_ugly_queue():
    for q in queues:
        if len(q) == 0:
            return None

    min_num = min([q[0] for q in queues])
    for i in range(len(queues)):
        if queues[i][0] == min_num:
            queues[i] = queues[i][1:]

    return min_num

def push_ugly_queue(ugly_num):
    queues[0].append(ugly_num * 2)
    queues[1].append(ugly_num * 3)
    queues[2].append(ugly_num * 5)

def solution(nth):
    ugly_nums = [1]
    cur_index = 0
    print 1,
    while len(ugly_nums) < nth:
        ugly_num = pop_ugly_queue()
        if not ugly_num:
            push_ugly_queue(ugly_nums[cur_index])
            cur_index += 1
        else:
            ugly_nums.append(ugly_num)
            print ugly_num,

    print "\n%dth ugly number:%d" % (nth, ugly_nums[-1])
    return ugly_nums[-1]

if __name__ == '__main__':
    solution(100)
